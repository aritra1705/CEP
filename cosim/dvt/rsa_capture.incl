//
//
// Need to pull up the data output, else they are all X when not used
//
//
reg CaptureRSA_vector=0;
always @(posedge `DVT_FLAG[`DVTF_RSA_CAPTURE_EN_BIT]) CaptureRSA_vector=1;
initial begin
   repeat(1) @(posedge cep_tb.fpga.topDesign.topMod.rsa.blackbox.clk);
   if (CaptureRSA_vector) begin
      @(posedge cep_tb.fpga.topDesign.topMod.rsa.blackbox.reset_n);
      // next clock
      @(posedge cep_tb.fpga.topDesign.topMod.rsa.blackbox.clk);
      captureRSAStimulus();
   end
end
   
   task captureRSAStimulus;
      int out;
      int sampleNum;      
      reg [(12*4)+(2*8)+(32*3)+4+64+(4*32)-1:0] temp;
      begin
	 sampleNum=0;
	 $display("Capturing stimulus");	 
	 out=$fopen("RSA_stimulus.csv","w");
	 $fwrite(out,"//************************************************************************\n");
	 $fwrite(out,"// Copyright (C) 2020 Massachusetts Institute of Technology\n");
	 $fwrite(out,"//\n");		
	 $fwrite(out,"// File Name:      RSA_stimulus.csv\n");
	 $fwrite(out,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(out,"// Description:    RSA Core unit testbench stimulus\n");
	 $fwrite(out,"// Notes:\n");        
	 $fwrite(out,"//\n");
	 $fwrite(out,"//************************************************************************\n");
	 //	 
	 // these can be X so put them on top
	 $fwrite(out,"// column#1  : IN  exponent_mem_api_cs\n");
	 $fwrite(out,"// column#2  : IN  exponent_mem_api_rst\n");
	 $fwrite(out,"// column#3  : IN  exponent_mem_api_wr\n");
	 $fwrite(out,"// column#4  : IN  message_mem_api_cs\n");
	 $fwrite(out,"// column#5  : IN  message_mem_api_rst\n");
	 $fwrite(out,"// column#6  : IN  message_mem_api_wr\n");
	 $fwrite(out,"// column#7  : IN  modulus_mem_api_cs\n");
	 $fwrite(out,"// column#8  : IN  modulus_mem_api_rst\n");
	 $fwrite(out,"// column#9  : IN  modulus_mem_api_wr\n");
	 $fwrite(out,"// column#10 : IN  result_mem_api_cs\n");
	 $fwrite(out,"// column#11 : IN  result_mem_api_rst\n");
	 $fwrite(out,"// column#12 : IN  start\n");
	 $fwrite(out,"// column#13 : IN  modulus_length[7:0]\n");	 
	 $fwrite(out,"// column#14 : IN  exponent_length[7:0]\n");
	 $fwrite(out,"// column#15 : IN  exponent_mem_api_write_data[31:0]\n");
	 $fwrite(out,"// column#16 : IN  message_mem_api_write_data[31:0]\n");
	 $fwrite(out,"// column#17 : IN  modulus_mem_api_write_data[31:0]\n");
	 $fwrite(out,"// column#18 : OUT ready\n");	 	 
	 $fwrite(out,"// column#19 : OUT cycles[63:0]\n");
	 $fwrite(out,"// column#20 : OUT exponent_mem_api_read_data[31:0]\n");
	 $fwrite(out,"// column#21 : OUT message_mem_api_read_data[31:0]\n");
	 $fwrite(out,"// column#22 : OUT modulus_mem_api_read_data[31:0]\n");
	 $fwrite(out,"// column#23 : OUT result_mem_api_read_data[31:0]\n");

	 //
	 // wait until valid in to interleaver
	 while (1) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.rsa.blackbox.clk);
	    sampleNum++;
	    // MUST align to HEX number if _ is used!!!
	    $fwrite(out,"%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x_%x\n",
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.exponent_mem_api_cs},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.exponent_mem_api_rst},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.exponent_mem_api_wr},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.message_mem_api_cs},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.message_mem_api_rst},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.message_mem_api_wr},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.modulus_mem_api_cs},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.modulus_mem_api_rst},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.modulus_mem_api_wr},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.result_mem_api_cs},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.result_mem_api_rst},
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.start},
		    cep_tb.fpga.topDesign.topMod.rsa.blackbox.modulus_length[7:0],	 
		    cep_tb.fpga.topDesign.topMod.rsa.blackbox.exponent_length[7:0],
		    cep_tb.fpga.topDesign.topMod.rsa.blackbox.exponent_mem_api_write_data[31:0],
		    cep_tb.fpga.topDesign.topMod.rsa.blackbox.message_mem_api_write_data[31:0],
		    cep_tb.fpga.topDesign.topMod.rsa.blackbox.modulus_mem_api_write_data[31:0],
		    {3'b0,cep_tb.fpga.topDesign.topMod.rsa.blackbox.ready},	 	 
		    cep_tb.fpga.topDesign.topMod.rsa.blackbox.cycles[63:0],
		    cep_tb.fpga.topDesign.topMod.rsa.blackbox.exponent_mem_api_read_data[31:0],
		    cep_tb.fpga.topDesign.topMod.rsa.blackbox.message_mem_api_read_data[31:0],
		    cep_tb.fpga.topDesign.topMod.rsa.blackbox.modulus_mem_api_read_data[31:0],
		    cep_tb.fpga.topDesign.topMod.rsa.blackbox.result_mem_api_read_data[31:0]
		    );
	 end // while (1)
      end
      
   endtask //
   

