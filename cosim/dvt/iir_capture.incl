//************************************************************************
// Copyright (C) 2020 Massachusetts Institute of Technology
// SPDX short identifier: MIT
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************
//
// Capture iir's IO cycle-by-cycle 
//
`ifndef MKSTR
`define MKSTR(x) `"x`"
`endif
//
reg CaptureIIR_vector=0;
`define IIR_DATA_WIDTH   (4+(2*32))
`define IIR_OUTPUT_WIDTH (32)
int IIR_sampleNum = 0;
int IIR_fd;
//
always @(posedge c2c_capture_enable[`DVTF_IIR_CAPTURE_EN_BIT]) begin
   $display("Enable cycle-by-cycle capturing of IIR stimulus");	    
   // wait until it gets out of reset
   //if (!cep_tb.fpga.topDesign.topMod.iir.blackbox.reset)
     @(posedge cep_tb.fpga.topDesign.topMod.iir.blackbox.reset);
   // next clock
   @(posedge cep_tb.fpga.topDesign.topMod.iir.blackbox.clk);
   CaptureIIR_vector=1;
   IIR_fd=$fopen("../../drivers/vectors/iir_stimulus.txt","w");
   captureIIR_Stimulus();   
end	
always @(negedge c2c_capture_enable[`DVTF_IIR_CAPTURE_EN_BIT]) begin
   if (CaptureIIR_vector) begin
      CaptureIIR_vector=0;
      repeat (2) @(posedge cep_tb.fpga.topDesign.topMod.iir.blackbox.clk);
      $display("Stop Capturing IIR stimulus");
      $fwrite(IIR_fd,"};\n");
      $fwrite(IIR_fd,"`define IIR_SAMPLE_COUNT %d\n",IIR_sampleNum);      
      $fclose(IIR_fd);
      $system("gzip -f ../../drivers/vectors/iir_stimulus.txt");
   end	    
end
//
//
// 
   task captureIIR_Stimulus;
      reg [`IIR_DATA_WIDTH-1:0] temp;
      begin
	 IIR_sampleNum = 0;
	 $display("Capturing stimulus");	 
	 $fwrite(IIR_fd,"//************************************************************************\n");
	 $fwrite(IIR_fd,"// Copyright (C) 2020 Massachusetts Institute of Technology\n");
	 $fwrite(IIR_fd,"//\n");		
	 $fwrite(IIR_fd,"// File Name:      IIR_stimulus.txt\n");
	 $fwrite(IIR_fd,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(IIR_fd,"// Description:    IIR Core unit testbench stimulus\n");
	 $fwrite(IIR_fd,"// Notes:\n");        
	 $fwrite(IIR_fd,"//\n");
	 $fwrite(IIR_fd,"//************************************************************************\n");
	 $fwrite(IIR_fd,"// column#1  : IN  reset (active low)\n");	 
	 $fwrite(IIR_fd,"// column#2  : IN  inData[31:0]\n");
	 $fwrite(IIR_fd,"// column#3  : OUT outData[31:0]\n");	 
	 //	 
	 $fwrite(IIR_fd,"`define IIR_DATA_WIDTH %s\n",`MKSTR(`IIR_DATA_WIDTH));
	 $fwrite(IIR_fd,"`define IIR_OUTPUT_WIDTH %s\n",`MKSTR(`IIR_OUTPUT_WIDTH));
	 $fwrite(IIR_fd,"reg [`IIR_DATA_WIDTH-1:0] IIR_buffer[] = {\n");
	 //
	 // wait until valid in to interleaver
	 while (CaptureIIR_vector) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.iir.blackbox.clk);
	    // MUST align to HEX number if _ is used!!!
	    if (IIR_sampleNum>0) begin
	       $fwrite(IIR_fd,"   ,");
            end else begin
	       $fwrite(IIR_fd,"    ");		 
            end
	    // MUST align to HEX number if _ is used!!!
	    $fwrite(IIR_fd,"'h%x_%x_%x\n",
		{3'b0,cep_tb.fpga.topDesign.topMod.iir.blackbox.reset},
		    cep_tb.fpga.topDesign.topMod.iir.blackbox.inData[31:0],
		    cep_tb.fpga.topDesign.topMod.iir.blackbox.outData[31:0]);
	    IIR_sampleNum++;
	 end // while (1)
      end
   endtask //
   
  
