//
//
//
reg CaptureIDFT_vector=0;
always @(posedge `DVT_FLAG[`DVTF_IDFT_CAPTURE_EN_BIT]) CaptureIDFT_vector=1;
initial begin
   repeat(1) @(posedge cep_tb.fpga.topDesign.topMod.idft.blackbox.clk);
   if (CaptureIDFT_vector) begin
      @(negedge cep_tb.fpga.topDesign.topMod.idft.blackbox.reset);
      // next clock
      @(posedge cep_tb.fpga.topDesign.topMod.idft.blackbox.clk);
      captureIDFTStimulus();
   end
end
   
   task captureIDFTStimulus;
      int out;
      int sampleNum;      
      reg [4+(4*16)+4+(4*16)-1:0] temp;
      begin
	 sampleNum=0;
	 $display("Capturing stimulus");	 
	 out=$fopen("IDFT_stimulus.csv","w");
	 $fwrite(out,"//************************************************************************\n");
	 $fwrite(out,"// Copyright (C) 2020 Massachusetts Institute of Technology\n");
	 $fwrite(out,"//\n");		
	 $fwrite(out,"// File Name:      IDFT_stimulus.csv\n");
	 $fwrite(out,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(out,"// Description:    IDFT Core unit testbench stimulus\n");
	 $fwrite(out,"// Notes:\n");        
	 $fwrite(out,"//\n");
	 $fwrite(out,"//************************************************************************\n");
	 //
	 $fwrite(out,"// column#1  : IN  next\n");
	 $fwrite(out,"// column#2  : IN  X0[15:0]\n");
	 $fwrite(out,"// column#3  : IN  X1[15:0]\n");
	 $fwrite(out,"// column#4  : IN  X2[15:0]\n");
	 $fwrite(out,"// column#5  : IN  X3[15:0]\n");
	 $fwrite(out,"// column#6  : OUT next_out\n");
	 $fwrite(out,"// column#7  : OUT lY0[15:0]\n");
	 $fwrite(out,"// column#8  : OUT lY1[15:0]\n");
	 $fwrite(out,"// column#9  : OUT lY2[15:0]\n");
	 $fwrite(out,"// column#10 : OUT lY3[15:0]\n");
	 //
	 // wait until valid in to interleaver
	 while (1) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.idft.blackbox.clk);
	    sampleNum++;
	    // MUST align to HEX number if _ is used!!!
	    $fwrite(out,"%x_%x_%x_%x_%x_%x_%x_%x_%x_%x\n",
		    {3'b0,cep_tb.fpga.topDesign.topMod.idft.blackbox.next},
		    cep_tb.fpga.topDesign.topMod.idft.blackbox.X0[15:0],
		    cep_tb.fpga.topDesign.topMod.idft.blackbox.X1[15:0],
		    cep_tb.fpga.topDesign.topMod.idft.blackbox.X2[15:0],
		    cep_tb.fpga.topDesign.topMod.idft.blackbox.X3[15:0],
		    {3'b0,cep_tb.fpga.topDesign.topMod.idft.blackbox.next_out},
		    cep_tb.fpga.topDesign.topMod.idft.blackbox.Y0[15:0],
		    cep_tb.fpga.topDesign.topMod.idft.blackbox.Y1[15:0],
		    cep_tb.fpga.topDesign.topMod.idft.blackbox.Y2[15:0],
		    cep_tb.fpga.topDesign.topMod.idft.blackbox.Y3[15:0]);

	 end
      end
   endtask //
   
