//************************************************************************
// Copyright 2021 Massachusetts Institute of Technology
// SPDX short identifier: BSD-2-Clause
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************
//
// Capture idft's IO cycle-by-cycle 
//
`ifndef MKSTR
`define MKSTR(x) `"x`"
`endif
//
reg CaptureIDFT_vector=0;
`define IDFT_DATA_WIDTH   (4+(4*16)+4+(4*16))
`define IDFT_OUTPUT_WIDTH (1+(4*64))
int IDFT_sampleNum = 0;
int IDFT_fd;
//
always @(posedge c2c_capture_enable[`DVTF_IDFT_CAPTURE_EN_BIT]) begin
   $display("Enable cycle-by-cycle capturing of IDFT stimulus");	    
   // wait until it gets out of reset
   if (cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.reset)
     @(negedge cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.reset);
   // next clock
   @(posedge cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.clk);
   CaptureIDFT_vector=1;
   IDFT_fd=$fopen("../../drivers/vectors/idft_stimulus.txt","w");
   captureIDFT_Stimulus();   
end	
always @(negedge c2c_capture_enable[`DVTF_IDFT_CAPTURE_EN_BIT]) begin
   if (CaptureIDFT_vector) begin
      CaptureIDFT_vector=0;
      repeat (2) @(posedge cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.clk);
      $display("Stop Capturing IDFT stimulus");
      $fwrite(IDFT_fd,"};\n");
      $fwrite(IDFT_fd,"`define IDFT_SAMPLE_COUNT %d\n",IDFT_sampleNum);      
      $fclose(IDFT_fd);
      $system("gzip -f ../../drivers/vectors/idft_stimulus.txt");
   end	    
end
//
//
// 
   task captureIDFT_Stimulus;
      reg [`IDFT_DATA_WIDTH-1:0] temp;
      begin
	 IDFT_sampleNum = 0;
	 $display("Capturing stimulus");	 
	 $fwrite(IDFT_fd,"//************************************************************************\n");
	 $fwrite(IDFT_fd,"// Copyright 2021 Massachusetts Institute of Technology\n");
	 $fwrite(IDFT_fd,"//\n");		
	 $fwrite(IDFT_fd,"// File Name:      IDFT_stimulus.txt\n");
	 $fwrite(IDFT_fd,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(IDFT_fd,"// Description:    IDFT Core unit testbench stimulus\n");
	 $fwrite(IDFT_fd,"// Notes:\n");        
	 $fwrite(IDFT_fd,"//\n");
	 $fwrite(IDFT_fd,"//************************************************************************\n");
	 $fwrite(IDFT_fd,"// column#1  : IN  next\n");
	 $fwrite(IDFT_fd,"// column#2  : IN  X0[15:0]\n");
	 $fwrite(IDFT_fd,"// column#3  : IN  X1[15:0]\n");
	 $fwrite(IDFT_fd,"// column#4  : IN  X2[15:0]\n");
	 $fwrite(IDFT_fd,"// column#5  : IN  X3[15:0]\n");
	 $fwrite(IDFT_fd,"// column#6  : OUT next_out\n");
	 $fwrite(IDFT_fd,"// column#7  : OUT lY0[15:0]\n");
	 $fwrite(IDFT_fd,"// column#8  : OUT lY1[15:0]\n");
	 $fwrite(IDFT_fd,"// column#9  : OUT lY2[15:0]\n");
	 $fwrite(IDFT_fd,"// column#10 : OUT lY3[15:0]\n");

	 //	 
	 $fwrite(IDFT_fd,"`define IDFT_DATA_WIDTH %s\n",`MKSTR(`IDFT_DATA_WIDTH));
	 $fwrite(IDFT_fd,"`define IDFT_OUTPUT_WIDTH %s\n",`MKSTR(`IDFT_OUTPUT_WIDTH));
	 $fwrite(IDFT_fd,"reg [`IDFT_DATA_WIDTH-1:0] IDFT_buffer[] = {\n");
	 //
	 // wait until valid in to interleaver
	 while (CaptureIDFT_vector) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.clk);
	    // MUST align to HEX number if _ is used!!!
	    if (IDFT_sampleNum>0) begin
	       $fwrite(IDFT_fd,"   ,");
            end else begin
	       $fwrite(IDFT_fd,"    ");		 
            end
	    // MUST align to HEX number if _ is used!!!
	    $fwrite(IDFT_fd,"'h%x_%x_%x_%x_%x_%x_%x_%x_%x_%x\n",
		    {3'b0,cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.next},
		    cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.X0[15:0],
		    cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.X1[15:0],
		    cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.X2[15:0],
		    cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.X3[15:0],
		    {3'b0,cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.next_out},
		    cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.Y0[15:0],
		    cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.Y1[15:0],
		    cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.Y2[15:0],
		    cep_tb.fpga.topDesign.topMod.idftmodule.idft_top_mock_tss_inst.idft_top_inst.Y3[15:0]);

	    IDFT_sampleNum++;
	 end // while (1)
      end
   endtask //
   
  
