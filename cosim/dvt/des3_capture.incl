//************************************************************************
// Copyright (C) 2020 Massachusetts Institute of Technology
// SPDX short identifier: MIT
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************
//
// Capture des3's IO cycle-by-cycle 
//
`ifndef MKSTR
`define MKSTR(x) `"x`"
`endif
//
reg CaptureDES3_vector=0;
`define DES3_DATA_WIDTH   (4+4+64+(3*56)+4+64)
`define DES3_OUTPUT_WIDTH (1+64)
int DES3_sampleNum = 0;
int DES3_fd;
//
always @(posedge c2c_capture_enable[`DVTF_DES3_CAPTURE_EN_BIT]) begin
   $display("Enable cycle-by-cycle capturing of DES3 stimulus");	    
   // wait until it gets out of reset
   if (cep_tb.fpga.topDesign.topMod.des3.blackbox.reset)
     @(negedge cep_tb.fpga.topDesign.topMod.des3.blackbox.reset);
   // next clock
   @(posedge cep_tb.fpga.topDesign.topMod.des3.blackbox.clk);
   CaptureDES3_vector=1;
   DES3_fd=$fopen("../../drivers/vectors/des3_stimulus.txt","w");
   captureDES3_Stimulus();   
end	
always @(negedge c2c_capture_enable[`DVTF_DES3_CAPTURE_EN_BIT]) begin
   if (CaptureDES3_vector) begin
      CaptureDES3_vector=0;
      repeat (2) @(posedge cep_tb.fpga.topDesign.topMod.des3.blackbox.clk);
      $display("Stop Capturing DES3 stimulus");
      $fwrite(DES3_fd,"};\n");
      $fwrite(DES3_fd,"`define DES3_SAMPLE_COUNT %d\n",DES3_sampleNum);      
      $fclose(DES3_fd);
      $system("gzip -f ../../drivers/vectors/des3_stimulus.txt");
   end	    
end
//
//
// 
   task captureDES3_Stimulus;
      reg [`DES3_DATA_WIDTH-1:0] temp;
      begin
	 DES3_sampleNum = 0;
	 $display("Capturing stimulus");	 
	 $fwrite(DES3_fd,"//************************************************************************\n");
	 $fwrite(DES3_fd,"// Copyright (C) 2020 Massachusetts Institute of Technology\n");
	 $fwrite(DES3_fd,"//\n");		
	 $fwrite(DES3_fd,"// File Name:      DES3_stimulus.txt\n");
	 $fwrite(DES3_fd,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(DES3_fd,"// Description:    DES3 Core unit testbench stimulus\n");
	 $fwrite(DES3_fd,"// Notes:\n");        
	 $fwrite(DES3_fd,"//\n");
	 $fwrite(DES3_fd,"//************************************************************************\n");
	 $fwrite(DES3_fd,"// column#1  : IN  /cep_tb/fpga/topDesign/topMod/des3/blackbox/start\n");
	 $fwrite(DES3_fd,"// column#2  : IN  /cep_tb/fpga/topDesign/topMod/des3/blackbox/decrypt\n");
	 $fwrite(DES3_fd,"// column#3  : IN  /cep_tb/fpga/topDesign/topMod/des3/blackbox/desIn[63:0]\n");
	 $fwrite(DES3_fd,"// column#4  : IN  /cep_tb/fpga/topDesign/topMod/des3/blackbox/key1[55:0]\n");
	 $fwrite(DES3_fd,"// column#5  : IN  /cep_tb/fpga/topDesign/topMod/des3/blackbox/key2[55:0]\n");
	 $fwrite(DES3_fd,"// column#6  : IN  /cep_tb/fpga/topDesign/topMod/des3/blackbox/key3[55:0]\n");
	 $fwrite(DES3_fd,"// column#7  : OUT /cep_tb/fpga/topDesign/topMod/des3/blackbox/out_valid\n");	 
	 $fwrite(DES3_fd,"// column#8  : OUT /cep_tb/fpga/topDesign/topMod/des3/blackbox/desOut[63:0]\n");
	 //	 
	 $fwrite(DES3_fd,"`define DES3_DATA_WIDTH %s\n",`MKSTR(`DES3_DATA_WIDTH));
	 $fwrite(DES3_fd,"`define DES3_OUTPUT_WIDTH %s\n",`MKSTR(`DES3_OUTPUT_WIDTH));
	 $fwrite(DES3_fd,"reg [`DES3_DATA_WIDTH-1:0] DES3_buffer[] = {\n");
	 //
	 // wait until valid in to interleaver
	 while (CaptureDES3_vector) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.des3.blackbox.clk);
	    // MUST align to HEX number if _ is used!!!
	    if (DES3_sampleNum>0) begin
	       $fwrite(DES3_fd,"   ,");
            end else begin
	       $fwrite(DES3_fd,"    ");		 
            end
	    $fwrite(DES3_fd,"'h%x_%x_%x_%x_%x_%x_%x_%x\n",
		    {3'b0,cep_tb.fpga.topDesign.topMod.des3.blackbox.start},	
		    {3'b0,cep_tb.fpga.topDesign.topMod.des3.blackbox.decrypt},
		    cep_tb.fpga.topDesign.topMod.des3.blackbox.desIn[63:0],
		    cep_tb.fpga.topDesign.topMod.des3.blackbox.key1[55:0],
		    cep_tb.fpga.topDesign.topMod.des3.blackbox.key2[55:0],
		    cep_tb.fpga.topDesign.topMod.des3.blackbox.key3[55:0],
		    {3'b0,cep_tb.fpga.topDesign.topMod.des3.blackbox.out_valid},	 
		    cep_tb.fpga.topDesign.topMod.des3.blackbox.desOut[63:0]);
	    DES3_sampleNum++;
	 end // while (1)
      end
   endtask //
   
  
