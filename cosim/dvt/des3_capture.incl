//
//
//
reg CaptureDES3_vector=0;
always @(posedge `DVT_FLAG[`DVTF_DES3_CAPTURE_EN_BIT]) CaptureDES3_vector=1;
initial begin
   repeat(1) @(posedge cep_tb.fpga.topDesign.topMod.des3.blackbox.clk);
   if (CaptureDES3_vector) begin
      @(negedge cep_tb.fpga.topDesign.topMod.des3.blackbox.reset);
      // next clock
      @(posedge cep_tb.fpga.topDesign.topMod.des3.blackbox.clk);
      captureDES3Stimulus();
   end
end
   
   task captureDES3Stimulus;
      int out;
      int sampleNum;      
      reg [4+4+64+(3*56)+4+64-1:0] temp;
      begin
	 sampleNum=0;
	 $display("Capturing stimulus");	 
	 out=$fopen("DES3_stimulus.csv","w");
	 $fwrite(out,"//************************************************************************\n");
	 $fwrite(out,"// Copyright (C) 2020 Massachusetts Institute of Technology\n");
	 $fwrite(out,"//\n");		
	 $fwrite(out,"// File Name:      DES3_stimulus.csv\n");
	 $fwrite(out,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(out,"// Description:    DES3 Core unit testbench stimulus\n");
	 $fwrite(out,"// Notes:\n");        
	 $fwrite(out,"//\n");
	 $fwrite(out,"//************************************************************************\n");
	 //
	 $fwrite(out,"// column#1  : IN  /cep_tb/fpga/topDesign/topMod/des3/blackbox/start\n");
	 $fwrite(out,"// column#2  : IN  /cep_tb/fpga/topDesign/topMod/des3/blackbox/decrypt\n");
	 $fwrite(out,"// column#3  : IN  /cep_tb/fpga/topDesign/topMod/des3/blackbox/desIn[63:0]\n");
	 $fwrite(out,"// column#4  : IN  /cep_tb/fpga/topDesign/topMod/des3/blackbox/key1[55:0]\n");
	 $fwrite(out,"// column#5  : IN  /cep_tb/fpga/topDesign/topMod/des3/blackbox/key2[55:0]\n");
	 $fwrite(out,"// column#6  : IN  /cep_tb/fpga/topDesign/topMod/des3/blackbox/key3[55:0]\n");
	 $fwrite(out,"// column#7  : OUT /cep_tb/fpga/topDesign/topMod/des3/blackbox/out_valid\n");	 
	 $fwrite(out,"// column#8  : OUT /cep_tb/fpga/topDesign/topMod/des3/blackbox/desOut[63:0]\n");
	 //
	 // wait until valid in to interleaver
	 while (1) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.des3.blackbox.clk);
	    sampleNum++;
	    // MUST align to HEX number if _ is used!!!
	    $fwrite(out,"%x_%x_%x_%x_%x_%x_%x_%x\n",
		    {3'b0,cep_tb.fpga.topDesign.topMod.des3.blackbox.start},	
		    {3'b0,cep_tb.fpga.topDesign.topMod.des3.blackbox.decrypt},
		    cep_tb.fpga.topDesign.topMod.des3.blackbox.desIn[63:0],
		    cep_tb.fpga.topDesign.topMod.des3.blackbox.key1[55:0],
		    cep_tb.fpga.topDesign.topMod.des3.blackbox.key2[55:0],
		    cep_tb.fpga.topDesign.topMod.des3.blackbox.key3[55:0],
		    {3'b0,cep_tb.fpga.topDesign.topMod.des3.blackbox.out_valid},	 
		    cep_tb.fpga.topDesign.topMod.des3.blackbox.desOut[63:0]);
	 end // while (1)
	 
      end
   endtask //
   
