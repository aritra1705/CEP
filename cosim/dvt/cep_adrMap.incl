//************************************************************************
// Copyright 2021 Massachusetts Institute of Technology
// SPDX License Identifier: MIT
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************

/* as reported from Chisel
Generated Address Map for CEP 3.1 and later

	       0 -     1000 ARWX  debug-controller@0
	    3000 -     4000 ARWX  error-device@3000
	   10000 -    14000  R X  rom@10000
	 2000000 -  2010000 ARW   clint@2000000
	 c000000 - 10000000 ARW   interrupt-controller@c000000
	64000000 - 64001000 ARW   serial@64000000
	64001000 - 64002000 ARW   spi@64001000
	64002000 - 64003000 ARW   gpio@64002000
	70000000 - 70000100 ARW   aes-slave@70000000
	70008000 - 70008040 ARW   aes-llki-slave@70008000
	70010000 - 70010100 ARW   md5-slave@70010000
	70018000 - 70018100 ARW   md5-llki-slave@70018000
	70020000 - 70020100 ARW   sha256-slave@70020000
	70028000 - 70028100 ARW   sha256-llki-slave@70028000
	70030000 - 70030100 ARW   rsa-slave@70030000
	70038000 - 70038100 ARW   rsa-llki-slave@70038000
	70040000 - 70040100 ARW   des3-slave@70040000
	70048000 - 70048100 ARW   des3-llki-slave@70048000
	70050000 - 70050100 ARW   dft-slave@70050000
	70058000 - 70058100 ARW   dft-llki-slave@70058000
	70060000 - 70060100 ARW   idft-slave@70060000
	70068000 - 70068100 ARW   idft-llki-slave@70068000
	70070000 - 70070100 ARW   fir-slave@70070000
	70078000 - 70078100 ARW   fir-llki-slave@70078000
	70080000 - 70080100 ARW   iir-slave@70080000
	70088000 - 70088100 ARW   iir-llki-slave@70088000
	70090000 - 70090100 ARW   gps-slave@70090000
	70098000 - 70098100 ARW   gps-llki-slave@70098000
	700f0000 - 70100000 ARW   cepregs-slave@700f0000
	70200000 - 70201000 ARW   srot-slave@70200000
	80000000 - c0000000  RWXC memory@80000000

*/

`ifndef CEP_ADRMAP_INCL
`define CEP_ADRMAP_INCL

// logicalData param for TL
`define LOGIC_XOR   0
`define LOGIC_OR    1
`define LOGIC_AND   2
`define LOGIC_SWAP  3


// for SPI/UART/GPIO
`define other_base_addr         'h6400_0000
`define other_base_size         'h3000

// bootrom as 4kx32 = 16Kbytes
`define bootrom_base_addr     'h0001_0000
`define bootrom_base_size     (1<<13)
// 32-bit offs
`define bootrom_base_test_offs 'h7fe
`define bootrom_known_pat0      'h12345678
`define bootrom_known_pat1      'h600dbabe

// CLINT: core-local interrupt
`define clint_base_addr     'h0200_0000
`define clint_base_size     (1<<16)

// NOTE: offset for MSIP to next hart is 4, the rest is 8
`define  clint_msip_offset        'h0000
`define  clint_mtimecmp_offset    'h4000
// rtcTick = 1usec interval
`define  clint_mtimer_offset      'hBFF8
//

// PLIC: platform-level interrupt controller
`define plic_base_addr     'h0c00_0000
`define plic_base_size     (1<<26)

// PLIC registers
// source 1 - 127, source2 = +4 ... til 127
`define plic_source1_prio_offset       'h00_0004
`define plic_pending_array_start       'h00_1000
`define plic_pending_array_last        'h00_100C

`define plic_hart0_m_mode_ien_start    'h00_2000
`define plic_hart0_m_mode_ien_stop     'h00_200C
`define plic_mode_ien_size_offset      'h80 

`define plic_hart0_m_mode_prio_thresh  'h20_0000
`define plic_hart0_m_mode_claim_done   'h20_0004
`define plic_prio_thresh_size_offset   'h1000

//QSPI0 flash 256Mb
`define flash0_base_adr     'h2000_0000
`define flash0_base_size     (1<<28)


`define debug_controller_base_addr	'h0000_0000	// " ]},{"base":[12288],"size":[4096]
`define error_device_base_addr		'h0000_3000	// "]},{"base":[65536],"size":[16384]
`define rom_base_addr			'h0001_0000	// "]},{"base":[33554432],"size":[65536]
`define interrupt_controller_base_addr	'h0c00_0000	// "]},{"base":[1677721600],"size":[4096]

//
// Debug
//
// NEED to multiply offset x4 to get byte address
`define debug_base_addr           'h0000_0000
`define	AbstractData0			'h04 
`define	AbstractData11			'h0f 	
`define	DebugModuleControl		'h10 
`define	DebugModuleStatus		'h11 
`define	HartInfo			'h12 
`define	HaltSummary1			'h13 
`define	HartArrayWindowSelect		'h14 
`define	HartArrayWindow			'h15 
`define	AbstractControlStatus		'h16 
`define	AbstractCommand			'h17 
`define	AbstractCommandAutoexec		'h18 
`define	ConfigurationStringPointer0	'h19 
`define	ConfigurationStringPointer1	'h1a 
`define	ConfigurationStringPointer2	'h1b 
`define	ConfigurationStringPointer3	'h1c 
`define	NextDebugModule			'h1d 
`define	ProgramBuffer0			'h20 
`define	ProgramBuffer15			'h2f 
`define	AuthenticationData		'h30 
`define	HaltSummary2			'h34 
`define	HaltSummary3			'h35 
`define	SystemBusAddress_127_96		'h37 
`define	SystemBusAccessControlStatus	'h38 
`define	SystemBusAddress31_0		'h39 
`define	SystemBusAddress63_32		'h3a 
`define	SystemBusAddress95_64		'h3b 
`define	SystemBusData31_0		'h3c 
`define	SystemBusData63_32		'h3d 
`define	SystemBusData95_64		'h3e 
`define	SystemBusData127_96		'h3f 
`define	HaltSummary0			'h40 

//
// byte offset but access as 32-bit ONLY
`define uart_base_addr           'h6400_0000
`define uart_txfifo       		'h00
`define uart_rxfifo       		'h04
`define uart_txctrl       		'h08
//`define uart_txmark       		'h0a
`define uart_rxctrl       		'h0c
//`define uart_rxmark       		'h0e
`define uart_ie       			'h10
`define uart_ip      			'h14
`define uart_div        		'h18
//
// byte offset but access as 32-bit ONLY
//
`define spi_base_addr            'h6400_1000
  `define spi_sckdiv    		'h00
  `define spi_sckmode   		'h04
  `define spi_csid      		'h10
  `define spi_csdef     		'h14
  `define spi_csmode    		'h18
  `define spi_dcssck    		'h28
  `define spi_dsckcs    		'h2a
  `define spi_dintercs  		'h2c
  `define spi_dinterxfr 		'h2e
  `define spi_extradel  		'h38
  `define spi_sampledel 		'h3c
  `define spi_fmt       		'h40
  `define spi_len       		'h42
  `define spi_txfifo    		'h48
  `define spi_rxfifo    		'h4c
  `define spi_txmark    		'h50
  `define spi_rxmark    		'h54
  `define spi_insnmode  		'h60
  `define spi_insnfmt   		'h64
  `define spi_insnproto 		'h65
  `define spi_insncmd   		'h66
  `define spi_insnpad   		'h67
  `define spi_ie        		'h70
  `define spi_ip        		'h74
//
`define gpio_base_addr           'h6400_2000
  `define gpio_pin			'h000 
  `define gpio_input_en			'h004 
  `define gpio_output_en		'h008 
  `define gpio_port_output		'h00C 
  `define gpio_pue			'h010 
  `define gpio_ds			'h014 
  `define gpio_rise_ie			'h018 
  `define gpio_rise_ip			'h01C 
  `define gpio_fall_ie			'h020 
  `define gpio_fall_ip			'h024 
  `define gpio_high_ie			'h028 
  `define gpio_high_ip			'h02C 
  `define gpio_low_ie			'h030 
  `define gpio_low_ip			'h034 
  `define gpio_iof_en			'h038 
  `define gpio_iof_sel			'h03C 
  `define gpio_out_xor			'h040 
//

//
`define MAX_CORES                4

`define ddr3_base_adr           'h8000_0000
`define ddr3_base_size          'h4000_0000

`define cep_fpga_base_adr       'h7000_0000
`define cep_fpga_base_size      'h0100_0000

`define	aes_base_addr           'h7000_0000
`define	md5_base_addr           'h7001_0000
`define	sha256_base_addr        'h7002_0000
`define	rsa_base_addr           'h7003_0000
`define	des3_base_addr          'h7004_0000
`define	dft_base_addr           'h7005_0000
`define	idft_base_addr          'h7006_0000
`define	fir_base_addr           'h7007_0000
`define	iir_base_addr           'h7008_0000
`define	gps_base_addr           'h7009_0000
`define	srot_base_addr          'h7020_0000

`define aes_ctrlstatus_addr      'h0000
`define aes_pt0_addr             'h0008
`define aes_pt1_addr             'h0010
`define aes_ct0_addr             'h0018
`define aes_ct1_addr             'h0020
`define aes_key0_addr            'h0028
`define aes_key1_addr            'h0030
`define aes_key2_addr            'h0038


`define fir_ctrlstatus_addr	 'h0000
`define fir_datain_addr_addr	 'h0008
`define fir_datain_data_addr	 'h0010
`define fir_dataout_addr_addr	 'h0018
`define fir_dataout_data_addr	 'h0020


// 64bytes
`define cep_cache_size          64

//
// Enable command sequence capture
// (this can be modified from Makefile)
//
`ifndef CAPTURE_CMD_SEQUENCE
`define CAPTURE_CMD_SEQUENCE 0
`endif


//
// Printf mail box per core
// each printf len is 128 bytes max and upto 32 per string
//  tha WILL GIVE 32 PRINTF per core
//
`define cep_printf_mem              'hB000_0000
`define cep_printf_str_max     128
`define cep_printf_max_lines   32
`define cep_printf_core_size   (cep_printf_str_max*cep_printf_max_lines)

//
// Place for malloc in bare metal
`define cep_malloc_heap_core0_start 'hB800_0000
`define cep_malloc_heap_core_size   'h0100_0000

`define cep_scratch_mem             'hBF00_0000
`define   CEP_GOOD_STATUS           'h600D_BABE
`define   CEP_BAD_STATUS            'hBAD0_DADE
`define   CEP_RUNNING_STATUS        'h1234_5678
`define   CEP_NEXT_TEST             'hBEEF_0000
//
`define	reg_base_addr           'h700F_0000
`define   CEP_VERSION_REG	'h700F_0000
`define CEP_EXPECTED_VERSION 	'h11030000_00000000
`define CEP_VERSION_MASK     	'h0FFFFFFF_FFFFFFFF
//
// Test and Set
//
`define   testNset_reg          'hFD10 
`define     isLock0_bit           0
`define     lock0Id_bit_lo        7
`define     lock0Id_mask        'h7F
`define     isLock1_bit           8
`define     lock1Id_bit_lo        9
`define     lock1Id_mask        'h7F
`define     isLock2_bit          16
`define     lock2Id_bit_lo       17
`define     lock2Id_mask        'h7F
`define     isLock3_bit          23
`define     lock3Id_bit_lo       25
`define     lock3Id_mask        'h7F
//
`define     reqLock_bit           32
`define     releaseLock_bit       33
`define     reqLockNum_bit        34
`define     reqLockNum_mask        3
`define     reqId_bit_lo          40
`define     reqId_mask            'h7F
//

`define   cep_scratch0_reg      'hFE00
`define   cep_scratch1_reg      'hFE08
`define   cep_scratch2_reg      'hFE10
`define   cep_scratch3_reg      'hFE18
`define   cep_scratch4_reg      'hFE20
`define   cep_scratch5_reg      'hFE28
`define   cep_scratch6_reg      'hFE30
`define   cep_scratch7_reg      'hFE38
`define   cep_core0_status      'hFF00
`define   cep_core1_status      'hFF08
`define   cep_core2_status      'hFF10
`define   cep_core3_status      'hFF18

`endif

