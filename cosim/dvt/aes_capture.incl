//************************************************************************
// Copyright (C) 2020 Massachusetts Institute of Technology
// SPDX short identifier: BSD-2-Clause
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************
//
// Capture aes's IO cycle-by-cycle 
//
`ifndef MKSTR
`define MKSTR(x) `"x`"
`endif
//
reg CaptureAES_vector=0;
`define AES_DATA_WIDTH   (4+192+128+4+128)
`define AES_OUTPUT_WIDTH (1+128)
int AES_sampleNum = 0;
int AES_fd;
//
always @(posedge c2c_capture_enable[`DVTF_AES_CAPTURE_EN_BIT]) begin
   $display("Enable cycle-by-cycle capturing of AES stimulus");	    
   // wait until it gets out of reset
   if (cep_tb.fpga.topDesign.topMod.aesmodule.aes_192_mock_tss_inst.rst)
     @(negedge cep_tb.fpga.topDesign.topMod.aesmodule.aes_192_mock_tss_inst.rst);
   // next clock
   @(posedge cep_tb.fpga.topDesign.topMod.aesmodule.aes_192_mock_tss_inst.clk);
   CaptureAES_vector=1;
   AES_fd=$fopen("../../drivers/vectors/aes_stimulus.txt","w");
   captureAES_Stimulus();   
end	
always @(negedge c2c_capture_enable[`DVTF_AES_CAPTURE_EN_BIT]) begin
   if (CaptureAES_vector) begin
      CaptureAES_vector=0;
      repeat (2) @(posedge cep_tb.fpga.topDesign.topMod.aesmodule.aes_192_mock_tss_inst.clk);
      $display("Stop Capturing AES stimulus");
      $fwrite(AES_fd,"};\n");
      $fwrite(AES_fd,"`define AES_SAMPLE_COUNT %d\n",AES_sampleNum);      
      $fclose(AES_fd);
      $system("gzip -f ../../drivers/vectors/aes_stimulus.txt");
   end	    
end
//
//
// 
   task captureAES_Stimulus;
      reg [`AES_DATA_WIDTH-1:0] temp;
      begin
	 AES_sampleNum = 0;
	 $display("Capturing stimulus");	 
	 $fwrite(AES_fd,"//************************************************************************\n");
	 $fwrite(AES_fd,"// Copyright (C) 2020 Massachusetts Institute of Technology\n");
	 $fwrite(AES_fd,"//\n");		
	 $fwrite(AES_fd,"// File Name:      AES_stimulus.txt\n");
	 $fwrite(AES_fd,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(AES_fd,"// Description:    AES Core unit testbench stimulus\n");
	 $fwrite(AES_fd,"// Notes:\n");        
	 $fwrite(AES_fd,"//\n");
	 $fwrite(AES_fd,"//************************************************************************\n");
	 $fwrite(AES_fd,"// column#1  : IN  start\n");
	 $fwrite(AES_fd,"// column#2  : IN  key[191:0]\n");	 
	 $fwrite(AES_fd,"// column#3  : IN  state[127:0]\n");
	 $fwrite(AES_fd,"// column#4  : OUT out_valid\n");	 
	 $fwrite(AES_fd,"// column#5  : OUT out[127:0]\n");
	 //	 
	 $fwrite(AES_fd,"`define AES_DATA_WIDTH %s\n",`MKSTR(`AES_DATA_WIDTH));
	 $fwrite(AES_fd,"`define AES_OUTPUT_WIDTH %s\n",`MKSTR(`AES_OUTPUT_WIDTH));
	 $fwrite(AES_fd,"reg [`AES_DATA_WIDTH-1:0] AES_buffer[] = {\n");
	 //
	 // wait until valid in to interleaver
	 while (CaptureAES_vector) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.aesmodule.aes_192_mock_tss_inst.clk);
	    // MUST align to HEX number if _ is used!!!
	    if (AES_sampleNum>0) begin
	       $fwrite(AES_fd,"   ,");
            end else begin
	       $fwrite(AES_fd,"    ");		 
            end
	    $fwrite(AES_fd,"'h%x_%x_%x_%x_%x\n",
		    {3'b0,cep_tb.fpga.topDesign.topMod.aesmodule.aes_192_mock_tss_inst.start},	
		    cep_tb.fpga.topDesign.topMod.aesmodule.aes_192_mock_tss_inst.key[191:0],
		    cep_tb.fpga.topDesign.topMod.aesmodule.aes_192_mock_tss_inst.state[127:0],
	    	    {3'b0,cep_tb.fpga.topDesign.topMod.aesmodule.aes_192_mock_tss_inst.out_valid},		     
		    cep_tb.fpga.topDesign.topMod.aesmodule.aes_192_mock_tss_inst.out[127:0]);
	    AES_sampleNum++;
	 end // while (1)
      end
   endtask //
   
  
