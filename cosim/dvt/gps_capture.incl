//************************************************************************
// Copyright (C) 2020 Massachusetts Institute of Technology
// SPDX short identifier: BSD-2-Clause
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************
//
// Capture gps's IO cycle-by-cycle 
//
`ifndef MKSTR
`define MKSTR(x) `"x`"
`endif
//
reg CaptureGPS_vector=0;
`define GPS_DATA_WIDTH   (4+8+4+16+(2*128))
`define GPS_OUTPUT_WIDTH (1+13+(2*128))
int GPS_sampleNum = 0;
int GPS_fd;
//
always @(posedge c2c_capture_enable[`DVTF_GPS_CAPTURE_EN_BIT]) begin
   $display("Enable cycle-by-cycle capturing of GPS stimulus");	    
   // wait until it gets out of reset
   if (cep_tb.fpga.topDesign.topMod.gps.blackbox.sync_rst_in)
     @(negedge cep_tb.fpga.topDesign.topMod.gps.blackbox.sync_rst_in);
   // next clock
   @(posedge cep_tb.fpga.topDesign.topMod.gps.blackbox.sys_clk_50);
   CaptureGPS_vector=1;
   GPS_fd=$fopen("../../drivers/vectors/gps_stimulus.txt","w");
   captureGPS_Stimulus();   
end	
always @(negedge c2c_capture_enable[`DVTF_GPS_CAPTURE_EN_BIT]) begin
   if (CaptureGPS_vector) begin
      CaptureGPS_vector=0;
      repeat (2) @(posedge cep_tb.fpga.topDesign.topMod.gps.blackbox.sys_clk_50);
      $display("Stop Capturing GPS stimulus");
      $fwrite(GPS_fd,"};\n");
      $fwrite(GPS_fd,"`define GPS_SAMPLE_COUNT %d\n",GPS_sampleNum);      
      $fclose(GPS_fd);
      $system("gzip -f ../../drivers/vectors/gps_stimulus.txt");
   end	    
end
//
//
// 
   task captureGPS_Stimulus;
      reg [`GPS_DATA_WIDTH-1:0] temp;
      begin
	 GPS_sampleNum = 0;
	 $display("Capturing stimulus");	 
	 $fwrite(GPS_fd,"//************************************************************************\n");
	 $fwrite(GPS_fd,"// Copyright (C) 2020 Massachusetts Institute of Technology\n");
	 $fwrite(GPS_fd,"//\n");		
	 $fwrite(GPS_fd,"// File Name:      GPS_stimulus.txt\n");
	 $fwrite(GPS_fd,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(GPS_fd,"// Description:    GPS Core unit testbench stimulus\n");
	 $fwrite(GPS_fd,"// Notes:\n");        
	 $fwrite(GPS_fd,"//\n");
	 $fwrite(GPS_fd,"//************************************************************************\n");
	 $fwrite(GPS_fd,"// column#1  : IN  startRound\n");
	 $fwrite(GPS_fd,"// column#2  : IN  sv_num[5:0]\n");	 
	 $fwrite(GPS_fd,"// column#3  : OUT l_code_valid\n");	 
	 $fwrite(GPS_fd,"// column#4  : OUT ca_code[12:0]\n");	 
	 $fwrite(GPS_fd,"// column#5  : OUT l_code[127:0]\n");
	 $fwrite(GPS_fd,"// column#6  : OUT p_code[127:0]\n");
	 //	 
	 $fwrite(GPS_fd,"`define GPS_DATA_WIDTH %s\n",`MKSTR(`GPS_DATA_WIDTH));
	 $fwrite(GPS_fd,"`define GPS_OUTPUT_WIDTH %s\n",`MKSTR(`GPS_OUTPUT_WIDTH));
	 $fwrite(GPS_fd,"reg [`GPS_DATA_WIDTH-1:0] GPS_buffer[] = {\n");
	 //
	 // wait until valid in to interleaver
	 while (CaptureGPS_vector) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.gps.blackbox.sys_clk_50);
	    // MUST align to HEX number if _ is used!!!
	    if (GPS_sampleNum>0) begin
	       $fwrite(GPS_fd,"   ,");
            end else begin
	       $fwrite(GPS_fd,"    ");		 
            end
	    // MUST align to HEX number if _ is used!!!
	    $fwrite(GPS_fd,"'h%x_%x_%x_%x_%x_%x\n",
		    {3'b0,cep_tb.fpga.topDesign.topMod.gps.blackbox.startRound},
		    {2'b0,cep_tb.fpga.topDesign.topMod.gps.blackbox.sv_num[5:0]},	 
		    {3'b0,cep_tb.fpga.topDesign.topMod.gps.blackbox.l_code_valid},	 
		    {3'b0,cep_tb.fpga.topDesign.topMod.gps.blackbox.ca_code[12:0]},	 
		    cep_tb.fpga.topDesign.topMod.gps.blackbox.l_code[127:0],
		    cep_tb.fpga.topDesign.topMod.gps.blackbox.p_code[127:0]);
	    GPS_sampleNum++;
	 end // while (1)
      end
   endtask //
   
  
