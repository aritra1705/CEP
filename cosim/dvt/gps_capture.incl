//
//
//
reg CaptureGPS_vector=0;
always @(posedge `DVT_FLAG[`DVTF_GPS_CAPTURE_EN_BIT]) CaptureGPS_vector=1;
initial begin
   repeat(1) @(posedge cep_tb.fpga.topDesign.topMod.gps.blackbox.sys_clk_50);
   if (CaptureGPS_vector) begin
      @(negedge cep_tb.fpga.topDesign.topMod.gps.blackbox.sync_rst_in);
      // next clock
      @(posedge cep_tb.fpga.topDesign.topMod.gps.blackbox.sys_clk_50);
      captureGPSStimulus();
   end
end
   
   task captureGPSStimulus;
      int out;
      int sampleNum;      
      reg [4+4+8+4+16+(2*128)-1:0] temp;
      begin
	 sampleNum=0;
	 $display("Capturing stimulus");	 
	 out=$fopen("GPS_stimulus.csv","w");
	 $fwrite(out,"//************************************************************************\n");
	 $fwrite(out,"// Copyright (C) 2020 Massachusetts Institute of Technology\n");
	 $fwrite(out,"//\n");		
	 $fwrite(out,"// File Name:      GPS_stimulus.csv\n");
	 $fwrite(out,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(out,"// Description:    GPS Core unit testbench stimulus\n");
	 $fwrite(out,"// Notes:\n");        
	 $fwrite(out,"//\n");
	 $fwrite(out,"//************************************************************************\n");
	 //
	 $fwrite(out,"// column#1  : IN  sync_rst_in\n");
	 $fwrite(out,"// column#2  : IN  startRound\n");
	 $fwrite(out,"// column#3  : IN  sv_num[5:0]\n");	 
	 $fwrite(out,"// column#4  : OUT l_code_valid\n");	 
	 $fwrite(out,"// column#5  : OUT ca_code[12:0]\n");	 
	 $fwrite(out,"// column#6  : OUT l_code[127:0]\n");
	 $fwrite(out,"// column#7  : OUT p_code[127:0]\n");
	 //
	 // wait until valid in to interleaver
	 while (1) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.gps.blackbox.sys_clk_50);
	    sampleNum++;
	    // MUST align to HEX number if _ is used!!!
	    $fwrite(out,"%x_%x_%x_%x_%x_%x_%x\n",
		    {3'b0,cep_tb.fpga.topDesign.topMod.gps.blackbox.sync_rst_in},
		    {3'b0,cep_tb.fpga.topDesign.topMod.gps.blackbox.startRound},
		    {2'b0,cep_tb.fpga.topDesign.topMod.gps.blackbox.sv_num[5:0]},	 
		    {3'b0,cep_tb.fpga.topDesign.topMod.gps.blackbox.l_code_valid},	 
		    {3'b0,cep_tb.fpga.topDesign.topMod.gps.blackbox.ca_code[12:0]},	 
		    cep_tb.fpga.topDesign.topMod.gps.blackbox.l_code[127:0],
		    cep_tb.fpga.topDesign.topMod.gps.blackbox.p_code[127:0]);
	 end
      end
   endtask //
   
