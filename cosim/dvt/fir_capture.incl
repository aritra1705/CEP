//************************************************************************
// Copyright 2021 Massachusetts Institute of Technology
// SPDX short identifier: BSD-2-Clause
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************
//
// Capture fir's IO cycle-by-cycle 
//
`ifndef MKSTR
`define MKSTR(x) `"x`"
`endif
//
reg CaptureFIR_vector=0;
`define FIR_DATA_WIDTH   (72+4+(2*32))
`define FIR_OUTPUT_WIDTH (3+32)
int FIR_sampleNum = 0;
int FIR_fd;
//
always @(posedge srot_start_capture) begin
   $display("Enable cycle-by-cycle capturing of FIR stimulus");	    
<<<<<<< HEAD
   // wait until it gets out of rst
   if (cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.rst)
     @(negedge cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.rst);
   // next clock
   @(posedge cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.clk);
=======
   // wait until it gets out of reset
   if (!cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.reset)
     @(posedge cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.reset);
   // next clock
   @(posedge cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.clk);
   CaptureFIR_vector=1;
>>>>>>> 6494113db2448733228b0f6659bfa0a7fedc93c0
   FIR_fd=$fopen("../../drivers/vectors/fir_stimulus.txt","w");
   captureFIR_Stimulus();   
end	

always @(posedge c2c_capture_enable[`DVTF_FIR_CAPTURE_EN_BIT]) begin
   CaptureFIR_vector=1;
end
//
always @(negedge c2c_capture_enable[`DVTF_FIR_CAPTURE_EN_BIT]) begin
   if (CaptureFIR_vector) begin
      CaptureFIR_vector=0;
<<<<<<< HEAD
      repeat (2) @(posedge cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.clk);
=======
      repeat (2) @(posedge cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.clk);
>>>>>>> 6494113db2448733228b0f6659bfa0a7fedc93c0
      $display("Stop Capturing FIR stimulus");
      $fwrite(FIR_fd,"};\n");
      $fwrite(FIR_fd,"`define FIR_SAMPLE_COUNT %d\n",FIR_sampleNum);      
      $fclose(FIR_fd);
      $system("gzip -f ../../drivers/vectors/fir_stimulus.txt");
   end	    
end
//
//
// 
   task captureFIR_Stimulus;
      reg [`FIR_DATA_WIDTH-1:0] temp;
      begin
	 FIR_sampleNum = 0;
	 $display("Capturing stimulus");	 
	 $fwrite(FIR_fd,"//************************************************************************\n");
	 $fwrite(FIR_fd,"// Copyright 2021 Massachusetts Institute of Technology\n");
	 $fwrite(FIR_fd,"//\n");		
	 $fwrite(FIR_fd,"// File Name:      FIR_stimulus.txt\n");
	 $fwrite(FIR_fd,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(FIR_fd,"// Description:    FIR Core unit testbench stimulus\n");
	 $fwrite(FIR_fd,"// Notes:\n");        
	 $fwrite(FIR_fd,"//\n");
	 $fwrite(FIR_fd,"//************************************************************************\n");
	 $fwrite(FIR_fd,"// column#L1 : LLKI OUT  llkid_key_ready,llkid_key_complete,llkid_clear_key_ack\n");
	 $fwrite(FIR_fd,"// column#L2 : LLKI IN  llkid_key_valid, llkid_clear_key\n");
	 $fwrite(FIR_fd,"// column#L3 : LLKI IN  llkid_key_data\n");

	 $fwrite(FIR_fd,"// column#1  : IN  rst_dut (active Hi)\n");	 
	 $fwrite(FIR_fd,"// column#2  : IN  inData[31:0]\n");
	 $fwrite(FIR_fd,"// column#3  : OUT outData[31:0]\n");	 
	 //	 
	 $fwrite(FIR_fd,"`define FIR_DATA_WIDTH %s\n",`MKSTR(`FIR_DATA_WIDTH));
	 $fwrite(FIR_fd,"`define FIR_OUTPUT_WIDTH %s\n",`MKSTR(`FIR_OUTPUT_WIDTH));
	 $fwrite(FIR_fd,"reg [`FIR_DATA_WIDTH-1:0] FIR_buffer[] = {\n");
	 //
	 // wait until valid in to interleaver
<<<<<<< HEAD
	 while (srot_start_capture) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.clk);
	    if (CaptureFIR_vector || !srot_stop_capture) begin
=======
	 while (CaptureFIR_vector) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.clk);
>>>>>>> 6494113db2448733228b0f6659bfa0a7fedc93c0
	    // MUST align to HEX number if _ is used!!!
	    if (FIR_sampleNum>0) begin
	       $fwrite(FIR_fd,"   ,");
            end else begin
	       $fwrite(FIR_fd,"    ");		 
            end
	    // MUST align to HEX number if _ is used!!!
<<<<<<< HEAD
	    $fwrite(FIR_fd,"'h%x_%x_%x_%x_%x_%x\n",
	    	    {1'b0,cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.llkid_key_ready,
		     cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.llkid_key_complete,
		     cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.llkid_clear_key_ack},
		    {2'b0, cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.llkid_key_valid,
		     cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.llkid_clear_key},
		    cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.llkid_key_data[63:0],
		    //
		{3'b0,cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.rst_dut},
		    cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.inData[31:0],
=======
	    $fwrite(FIR_fd,"'h%x_%x\n",
	    	    cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.inData[31:0],
>>>>>>> 6494113db2448733228b0f6659bfa0a7fedc93c0
		    cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.outData[31:0]);
	    FIR_sampleNum++;
	    end
	 end // while (1)
      end
   endtask //
   
  
