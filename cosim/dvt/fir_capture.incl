//************************************************************************
// Copyright 2021 Massachusetts Institute of Technology
// SPDX short identifier: BSD-2-Clause
//
// File Name:      
// Program:        Common Evaluation Platform (CEP)
// Description:    
// Notes:          
//
//************************************************************************
//
// Capture fir's IO cycle-by-cycle 
//
`ifndef MKSTR
`define MKSTR(x) `"x`"
`endif
//
reg CaptureFIR_vector=0;
`define FIR_DATA_WIDTH   (2*32)
`define FIR_OUTPUT_WIDTH (32)
int FIR_sampleNum = 0;
int FIR_fd;
//
always @(posedge c2c_capture_enable[`DVTF_FIR_CAPTURE_EN_BIT]) begin
   $display("Enable cycle-by-cycle capturing of FIR stimulus");	    
   // wait until it gets out of reset
   if (!cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.reset)
     @(posedge cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.reset);
   // next clock
   @(posedge cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.clk);
   CaptureFIR_vector=1;
   FIR_fd=$fopen("../../drivers/vectors/fir_stimulus.txt","w");
   captureFIR_Stimulus();   
end	
always @(negedge c2c_capture_enable[`DVTF_FIR_CAPTURE_EN_BIT]) begin
   if (CaptureFIR_vector) begin
      CaptureFIR_vector=0;
      repeat (2) @(posedge cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.clk);
      $display("Stop Capturing FIR stimulus");
      $fwrite(FIR_fd,"};\n");
      $fwrite(FIR_fd,"`define FIR_SAMPLE_COUNT %d\n",FIR_sampleNum);      
      $fclose(FIR_fd);
      $system("gzip -f ../../drivers/vectors/fir_stimulus.txt");
   end	    
end
//
//
// 
   task captureFIR_Stimulus;
      reg [`FIR_DATA_WIDTH-1:0] temp;
      begin
	 FIR_sampleNum = 0;
	 $display("Capturing stimulus");	 
	 $fwrite(FIR_fd,"//************************************************************************\n");
	 $fwrite(FIR_fd,"// Copyright 2021 Massachusetts Institute of Technology\n");
	 $fwrite(FIR_fd,"//\n");		
	 $fwrite(FIR_fd,"// File Name:      FIR_stimulus.txt\n");
	 $fwrite(FIR_fd,"// Program:        Common Evaluation Platform (CEP)\n");
	 $fwrite(FIR_fd,"// Description:    FIR Core unit testbench stimulus\n");
	 $fwrite(FIR_fd,"// Notes:\n");        
	 $fwrite(FIR_fd,"//\n");
	 $fwrite(FIR_fd,"//************************************************************************\n");
	 //	 
	 $fwrite(FIR_fd,"// column#1  : IN  inData[31:0]\n");
	 $fwrite(FIR_fd,"// column#2  : OUT outData[31:0]\n");
	 
	 $fwrite(FIR_fd,"`define FIR_DATA_WIDTH %s\n",`MKSTR(`FIR_DATA_WIDTH));
	 $fwrite(FIR_fd,"`define FIR_OUTPUT_WIDTH %s\n",`MKSTR(`FIR_OUTPUT_WIDTH));
	 $fwrite(FIR_fd,"reg [`FIR_DATA_WIDTH-1:0] FIR_buffer[] = {\n");
	 
	 //
	 // wait until valid in to interleaver
	 while (CaptureFIR_vector) begin
	    @(negedge cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.clk);
	    // MUST align to HEX number if _ is used!!!
	    if (FIR_sampleNum>0) begin
	       $fwrite(FIR_fd,"   ,");
            end else begin
	       $fwrite(FIR_fd,"    ");		 
            end
	    // MUST align to HEX number if _ is used!!!
	    $fwrite(FIR_fd,"'h%x_%x\n",
	    	    cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.inData[31:0],
		    cep_tb.fpga.topDesign.topMod.firmodule.FIR_filter_mock_tss_inst.FIR_filter_inst.outData[31:0]);
	    FIR_sampleNum++;
	 end // while (1)
      end
   endtask //
   
  
